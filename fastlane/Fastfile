# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

ENV["FASTLANE_SKIP_UPDATE_CHECK"] = "1"
ENV["FASTLANE_HIDE_CHANGELOG"] = "1"

default_platform(:ios)

platform :ios do
  # Development
  desc "Lint code"
  lane :lint_code do
    puts("Lint code using swiftlint")
    swiftlint(
      mode: :lint,
      executable: "./Pods/SwiftLint/swiftlint",
      config_file: "./Moment/.swiftlint.yml",
      raise_if_swiftlint_error: true)
  end

  desc "Lint and format code"
  lane :format_code do 
    puts("Lint and format code using swiftlint")
    swiftlint(
      mode: :autocorrect,
      executable: "./Pods/SwiftLint/swiftlint",
      config_file: "./Moment/.swiftlint.yml",
      raise_if_swiftlint_error: true)
  end  

  desc "Sort Xcode project files"
  lane :sort_files do
    puts("Sort the files for the Xcode project")
    sh "../scripts/sort-Xcode-project-file.pl ../Moment/Moment.xcodeproj"
  end

  desc "Prepare for a pull request"
  lane :prepare_pr do
    format_code
    sort_files
  end

  desc "Build development app"
  lane :build_dev_app do
    puts("Build development app")
    gym(workspace: "Moment.xcworkspace",
      scheme: "Moment",
      configuration: "Debug",
      export_method: "development",
      xcargs: "-allowProvisioningUpdates")
  end

  # Test
  desc "Run unit tests"
  lane :tests do
    puts("Run the tests")
    scan(workspace: "Moment.xcworkspace",
      scheme: "Moment",
      output_directory: "./fastlane/test_output",
      output_types: "html",
      buildlog_path: "./fastlane/test_output")
  end

  # Profile
  desc "Create all new provisioning profiles managed by fastlane match"
  lane :create_new_profiles do
    api_key = get_app_store_connect_api_key
    keychain_name = "TemporaryKeychain"
    keychain_password = "TemporaryKeychainPassword"

    create_keychain(
      name: keychain_name,
      password: keychain_password,
      default_keychain: false,
      timeout: 3600,
      unlock: true
    )

    match(
      type: "adhoc",
      keychain_name: keychain_name,
      keychain_password: keychain_password,
      storage_mode: "git",
      git_url: "https://github.com/samlaudev/moment-codesign",
      app_identifier: "com.samlaudev.cp3.moment.internal",
      team_id: "5V2BL643LV",
      api_key: api_key
    )

    match(
      type: "appstore",
      keychain_name: keychain_name,
      keychain_password: keychain_password,
      storage_mode: "git",
      git_url: "https://github.com/samlaudev/moment-codesign",
      app_identifier: "com.samlaudev.cp3.moment",
      team_id: "5V2BL643LV",
      api_key: api_key
    )
  end

  # Private lanes
  desc 'Get App Store Connect API key'
  private_lane :get_app_store_connect_api_key do
    # The key needs to have App Manager role, see https://github.com/fastlane/fastlane/issues/17066
    key_content = ENV["APP_STORE_CONNECT_API_CONTENT"]  # Make sure setting this environment variable before call this lane.
    api_key = app_store_connect_api_key(
      key_id: "NZ24F4NNDJ",
      issuer_id: "69a6de86-9e10-47e3-e053-5b8c7c11a4d1",
      key_content: "-----BEGIN EC PRIVATE KEY-----\n" + key_content + "\n-----END EC PRIVATE KEY-----",
      duration: 1200,
      in_house: false
    )

    api_key 
  end

end
