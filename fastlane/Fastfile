# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

ENV["FASTLANE_SKIP_UPDATE_CHECK"] = "1"
ENV["FASTLANE_HIDE_CHANGELOG"] = "1"

# Development and test config
app_name = "Moment"

# Profile config
git_url = "https://github.com/samlaudev/moment-codesign"
app_identifier_internal = "com.samlaudev.cp3.moment.internal"
app_identifier_app_store = "com.samlaudev.cp3.moment"
team_id = "5V2BL643LV"
key_id = "NZ24F4NNDJ"
issuer_id = "69a6de86-9e10-47e3-e053-5b8c7c11a4d1"

# Helper config
swiftlint_config_file = app_name + "/.swiftlint.yml"
sort_files_command = "../scripts/sort-Xcode-project-file.pl " + "../" + 
                      app_name + "/" + app_name + ".xcodeproj"
workspace =  app_name + ".xcworkspace"
xcodeproj = app_name + "/" + app_name + ".xcodeproj"
keychain_name = app_name + "AppKeychain"
keychain_password = app_name + "AppKeychainPassword"

default_platform(:ios)

platform :ios do
  # Development
  desc "Lint code"
  lane :lint_code do
    puts("Lint code using swiftlint")
    swiftlint(
      mode: :lint,
      executable: "./Pods/SwiftLint/swiftlint",
      config_file: swiftlint_config_file,
      raise_if_swiftlint_error: true)
  end

  desc "Lint and format code"
  lane :format_code do 
    puts("Lint and format code using swiftlint")
    swiftlint(
      mode: :autocorrect,
      executable: "./Pods/SwiftLint/swiftlint",
      config_file: swiftlint_config_file,
      raise_if_swiftlint_error: true)
  end  

  desc "Sort Xcode project files"
  lane :sort_files do
    puts("Sort the files for the Xcode project")
    sh sort_files_command 
  end

  desc "Prepare for a pull request"
  lane :prepare_pr do
    format_code
    sort_files
  end

  desc "Build development app"
  lane :build_dev_app do
    puts("Build development app")
    gym(workspace: workspace,
      scheme: app_name,
      configuration: "Debug",
      export_method: "development",
      xcargs: "-allowProvisioningUpdates")
  end

  # Test
  desc "Run unit tests"
  lane :tests do
    puts("Run the tests")
    scan(workspace: workspace,
      scheme: app_name,
      output_directory: "./fastlane/test_output",
      output_types: "html",
      buildlog_path: "./fastlane/test_output")
  end

  # Profile
  desc "Download certificates and profiles"
  lane :download_profiles do
    create_keychain(
      name: keychain_name,
      password: keychain_password,
      default_keychain: false,
      timeout: 3600,
      unlock: true,
    )

    match(
      type: "adhoc",
      readonly: true,
      keychain_name: keychain_name,
      keychain_password: keychain_password,
      storage_mode: "git",
      git_url: git_url,
      app_identifier: app_identifier_internal,
      team_id: team_id 
    )

    match(
      type: "appstore",
      readonly: true,
      keychain_name: keychain_name,
      keychain_password: keychain_password,
      storage_mode: "git",
      git_url: git_url,
      app_identifier: app_identifier_app_store,
      team_id: team_id 
    )
  end

  desc "Create all new provisioning profiles managed by fastlane match"
  lane :create_new_profiles do
    api_key = get_app_store_connect_api_key

    create_keychain(
      name: keychain_name,
      password: keychain_password,
      default_keychain: false,
      timeout: 3600,
      unlock: true
    )

    match(
      type: "adhoc",
      keychain_name: keychain_name,
      keychain_password: keychain_password,
      storage_mode: "git",
      git_url: git_url,
      app_identifier: app_identifier_internal,
      team_id: team_id,
      api_key: api_key
    )

    match(
      type: "appstore",
      keychain_name: keychain_name,
      keychain_password: keychain_password,
      storage_mode: "git",
      git_url: git_url,
      app_identifier: app_identifier_app_store,
      team_id: team_id,
      api_key: api_key
    )
  end

  desc "Nuke all provisioning profiles managed by fastlane match"
  lane :nuke_profiles do
    api_key = get_app_store_connect_api_key

    create_keychain(
      name: keychain_name,
      password: keychain_password,
      default_keychain: false,
      timeout: 3600,
      unlock: true
    )

    match_nuke(
      type: "adhoc",
      keychain_name: keychain_name,
      keychain_password: keychain_password,
      storage_mode: "git",
      git_url: git_url,
      app_identifier: app_identifier_internal,
      team_id: team_id,
      api_key: api_key
    )

    match_nuke(
      type: "appstore",
      keychain_name: keychain_name,
      keychain_password: keychain_password,
      storage_mode: "git",
      git_url: git_url,
      app_identifier: app_identifier_app_store,
      team_id: team_id,
      api_key: api_key
    )

    delete_keychain(name: keychain_name)
  end

  desc "Add new device to provisioning profile"
  lane :add_device do |options|
    name = options[:name]
    udid = options[:udid]
    
    # Add device to App Store Connect
    api_key = get_app_store_connect_api_key
    register_device(
      name: name,
      udid: udid,
      team_id: team_id,
      api_key: api_key 
    )

    # Update profiles to Git private repo
    match(
      type: "adhoc",
      force: true,
      storage_mode: "git",
      git_url: git_url,
      app_identifier: app_identifier_internal,
      team_id: team_id,
      api_key: api_key 
    )
  end

  # Archive
  desc "Create an archive of the internal app for testing"
  lane :archive_internal do
    unlock_keychain(
      path: keychain_name,
      password: keychain_password
    )

    puts("Create an archive for internal testing")
    gym(
      workspace: workspace,
      scheme: app_name + "-Internal",
      export_method: "ad-hoc",
      xcargs: "-allowProvisioningUpdates"
    )

    puts("If you run this lane on your local machine, should not commit the changes for your project file to Git")
  end

  desc "Create an archive of the production app with app store distribution"
  lane :archive_appstore do
    unlock_keychain(
      path: keychain_name,
      password: keychain_password
    )

    puts("Create an archive for internal testing")
    gym(
      workspace: workspace,
      scheme: app_name + "-AppStore",
      export_method: "app-store",
      xcargs: "-allowProvisioningUpdates"
    )

    puts("If you run this lane on your local machine, should not commit the changes for your project file to Git")
  end

  # Private lanes
  desc 'Get App Store Connect API key'
  private_lane :get_app_store_connect_api_key do
    # The key needs to have App Manager role, see https://github.com/fastlane/fastlane/issues/17066
    key_content = ENV["APP_STORE_CONNECT_API_CONTENT"]  # Make sure setting this environment variable before call this lane.
    api_key = app_store_connect_api_key(
      key_id: key_id,
      issuer_id: issuer_id,
      key_content: "-----BEGIN EC PRIVATE KEY-----\n" + key_content + "\n-----END EC PRIVATE KEY-----",
      duration: 1200,
      in_house: false
    )

    api_key 
  end

end
